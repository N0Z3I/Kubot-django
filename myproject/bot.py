import os
import django
import json
import pytz

try:
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "myproject.settings")
    django.setup()
except Exception as e:
    print(f"Error setting up Django: {str(e)}")
    exit(1)

import discord
import asyncio
from discord import app_commands, ui
from discord.ext import commands, tasks
from accounts.models import DiscordProfile, StudentProfile, GPAX, StudentEducation, Schedule, GroupCourse, TeacherProfile, Event
import concurrent.futures
from datetime import datetime, timedelta
from asgiref.sync import sync_to_async

timezone = pytz.timezone('Asia/Bangkok')  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Timezone

intents = discord.Intents.default()
intents.members = True
intents.message_content = True

bot = commands.Bot(command_prefix="!", intents=intents)

user_schedule_notifications = {}

@tasks.loop(minutes=1)
async def schedule_notification_task():
    try:
        for user_id, settings in user_schedule_notifications.items():
            # Fetch course data
            course = await run_in_thread(lambda: GroupCourse.objects.get(id=settings['course_id']))
            current_time = datetime.now(timezone)

            # Check time condition based on user preference
            if settings['notification_time'] == '2_hours':
                notify_time = course.time_from - timedelta(hours=2)
            elif settings['notification_time'] == '1_day':
                notify_time = course.time_from - timedelta(days=1)

            # Send notification if the time is appropriate
            if current_time >= notify_time:
                user = await bot.fetch_user(int(user_id))
                if user:
                    await user.send(f"Reminder: Your class '{course.subject_name}' starts at {course.time_from}.")

    except Exception as e:
        print(f"Error in schedule notification task: {e}")

last_announcement_id = None  # Global variable to track the last sent announcement

@tasks.loop(minutes=1)
async def check_for_new_announcements():
    global last_announcement_id
    try:
        # Fetch the latest announcement
        latest_announcement = await sync_to_async(lambda: Event.objects.latest('id'))()

        # Check if it is a new announcement
        if last_announcement_id is None or latest_announcement.id > last_announcement_id:
            # Update the last_announcement_id
            last_announcement_id = latest_announcement.id

            # Notify subscribed users (as previously implemented)
            students = await sync_to_async(lambda: list(StudentProfile.objects.filter(group_courses__id=latest_announcement.course.id)))()

            for student in students:
                discord_profile = await sync_to_async(lambda: DiscordProfile.objects.get(user=student.user))()
                user = await bot.fetch_user(int(discord_profile.discord_id))

                if user:
                    embed = discord.Embed(
                        title=f"üì¢ New Announcement for {latest_announcement.title}",
                        description=latest_announcement.description,
                        color=discord.Color.dark_teal()
                    )
                    embed.add_field(name="Type", value=latest_announcement.event_type, inline=True)
                    embed.add_field(name="Date", value=f"{latest_announcement.start_date} to {latest_announcement.end_date}", inline=True)
                    embed.add_field(name="Time", value=f"{latest_announcement.start_time} - {latest_announcement.end_time}", inline=True)

                    await user.send(embed=embed)
    except Event.DoesNotExist:
        # No announcements exist yet
        pass
    except Exception as e:
        print(f"Error checking for new announcements: {e}")



@bot.event
async def on_ready():
    await bot.change_presence(status=discord.Status.online, activity=discord.Game('/help'))
    print(f"{bot.user.name} has connected to Discord!")
    try:
        synced = await bot.tree.sync()
        print(f"Synced {len(synced)} commands.")
    except Exception as e:
        print(f"Error syncing commands: {e}")

    # Start tasks if they are not already running
    if not check_for_new_announcements.is_running():
        check_for_new_announcements.start()
    if not schedule_notification_task.is_running():
        schedule_notification_task.start()
        
        
@bot.tree.command(name="announcement", description="‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏î‡πÄ‡∏ä‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô")
async def announcement(interaction: discord.Interaction):
    await interaction.response.defer(ephemeral=True)
    
    try:
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        announcements = await run_in_thread(lambda: list(Event.objects.all()))
        
        if not announcements:
            await interaction.followup.send("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ", ephemeral=True)
            return

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Embed ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®
        embed = discord.Embed(title="üì¢ ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏•‡∏∞‡∏ä‡∏î‡πÄ‡∏ä‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô", color=discord.Color.dark_teal())
        
        for announcement in announcements:
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÉ‡∏ô Embed
            embed.add_field(
                name=announcement.title,
                value=(
                    f"‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {announcement.event_type}\n"
                    f"‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {announcement.description}\n"
                    f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {announcement.start_date} ‡∏ñ‡∏∂‡∏á {announcement.end_date}\n"
                    f"‡πÄ‡∏ß‡∏•‡∏≤: {announcement.start_time} - {announcement.end_time}\n"
                ),
                inline=False
            )

        await interaction.followup.send(embed=embed)

    except Exception as e:
        await interaction.followup.send(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}", ephemeral=True)

@bot.tree.command(name="set_announcement", description="‡∏ï‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÉ‡∏´‡∏°‡πà")
async def set_announcement(interaction: discord.Interaction):
    await interaction.response.defer(ephemeral=True)
    
    try:
        # Fetch the student's profile based on Discord ID
        discord_id = str(interaction.user.id)
        student_profile = await run_in_thread(lambda: StudentProfile.objects.get(user__discordprofile__discord_id=discord_id))
        
        # Fetch related group courses
        group_courses = await run_in_thread(lambda: list(GroupCourse.objects.filter(student_profile=student_profile)))
        
        if not group_courses:
            await interaction.followup.send("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏¥‡∏ä‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ", ephemeral=True)
            return

        # Create options for course selection
        options = [
            discord.SelectOption(label=course.subject_name, description=course.subject_code, value=str(course.id))
            for course in group_courses
        ]

        # Create a dropdown menu
        select = ui.Select(placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®", options=options)
        
        async def select_callback(interaction: discord.Interaction):
            selected_course_id = int(select.values[0])
            selected_course = await run_in_thread(lambda: GroupCourse.objects.get(id=selected_course_id))
            # Logic for subscribing the user to notifications for this course
            await interaction.response.send_message(
                f"‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡∏ä‡∏≤ {selected_course.subject_name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", ephemeral=True
            )
        
        select.callback = select_callback

        # Button for closing notifications
        async def close_notification(interaction: discord.Interaction):
            # Logic for unsubscribing or stopping notifications can go here
            await interaction.response.send_message("‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", ephemeral=True)

        close_button = ui.Button(label="‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", style=discord.ButtonStyle.danger)
        close_button.callback = close_notification

        # Create the view and add elements
        view = ui.View()
        view.add_item(select)
        view.add_item(close_button)
        await interaction.followup.send("‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:", view=view)

    except StudentProfile.DoesNotExist:
        await interaction.followup.send("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ", ephemeral=True)
    except Exception as e:
        await interaction.followup.send(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}", ephemeral=True)

        
@bot.tree.command(name="my_courses", description="‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå)")
async def my_courses(interaction: discord.Interaction):
    try:
        # ‡∏î‡∏∂‡∏á TeacherProfile ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ Discord
        teacher_profile = await run_in_thread(lambda: TeacherProfile.objects.get(user__discordprofile__discord_id=str(interaction.user.id)))
        
        # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏™‡∏≠‡∏ô
        courses = await run_in_thread(lambda: list(GroupCourse.objects.filter(teacher=teacher_profile)))

        if not courses:
            await interaction.response.send_message("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏ô", ephemeral=True)
            return

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Embed ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤
        embed = discord.Embed(title="‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏ô", color=discord.Color.blue())
        for course in courses:
            embed.add_field(
                name=course.subject_name,
                value=f"‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤: {course.subject_code}\n‡∏ß‡∏±‡∏ô: {course.day_w}\n‡πÄ‡∏ß‡∏•‡∏≤: {course.time_from} - {course.time_to}",
                inline=False
            )
        await interaction.response.send_message(embed=embed, ephemeral=True)

    except TeacherProfile.DoesNotExist:
        await interaction.response.send_message(
            "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", ephemeral=True
        )

async def run_in_thread(func):
    loop = asyncio.get_running_loop()
    with ThreadPoolExecutor() as pool:
        return await loop.run_in_executor(pool, func)
        
@bot.tree.command(name="set_schedule", description="‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡∏ä‡∏≤")
async def set_notification(interaction: discord.Interaction):
    try:
        discord_id = str(interaction.user.id)
        student_profile = await run_in_thread(lambda: StudentProfile.objects.get(user__discordprofile__discord_id=discord_id))
        group_courses = await run_in_thread(lambda: list(GroupCourse.objects.filter(student_profile=student_profile)))

        course_options = [
            discord.SelectOption(
                label=course.subject_name,
                description=f"{course.subject_code}",
                value=str(course.id)
            )
            for course in group_courses
        ]
        notification_options = [
            discord.SelectOption(label="‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á", value="2_hours"),
            discord.SelectOption(label="‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ 1 ‡∏ß‡∏±‡∏ô", value="1_day")
        ]

        select_course = ui.Select(placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", options=course_options)
        select_notification = ui.Select(placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", options=notification_options)

        async def course_callback(interaction: discord.Interaction):
            selected_course_id = int(select_course.values[0])
            selected_course = await run_in_thread(lambda: GroupCourse.objects.get(id=selected_course_id))
            await interaction.response.send_message(f"‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤ {selected_course.subject_name}", ephemeral=True)

            # Store user preference
            user_schedule_notifications[discord_id] = {
                'course_id': selected_course_id,
                'notification_time': user_schedule_notifications[discord_id].get('notification_time', '2_hours')
            }

        async def notification_callback(interaction: discord.Interaction):
            selected_option = select_notification.values[0]
            await interaction.response.send_message(f"‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: {selected_option}", ephemeral=True)

            # Update user preference
            if discord_id in user_schedule_notifications:
                user_schedule_notifications[discord_id]['notification_time'] = selected_option

        async def close_notification(interaction: discord.Interaction):
            if discord_id in user_schedule_notifications:
                del user_schedule_notifications[discord_id]
            await interaction.response.send_message("‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î", ephemeral=True)

        close_button = ui.Button(label="‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", style=discord.ButtonStyle.danger)
        close_button.callback = close_notification

        select_course.callback = course_callback
        select_notification.callback = notification_callback

        view = ui.View()
        view.add_item(select_course)
        view.add_item(select_notification)
        view.add_item(close_button)
        await interaction.response.send_message("‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:", view=view)
    except Exception as e:
        await interaction.response.send_message(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}", ephemeral=True)

        
@bot.tree.command(name="schedule", description="‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ß‡∏¥‡∏ä‡∏≤")
async def schedule(interaction: discord.Interaction):
    await interaction.response.defer(ephemeral=True)

    try:
        discord_profile = await run_in_thread(lambda: DiscordProfile.objects.get(discord_id=str(interaction.user.id)))
        student_profile = await run_in_thread(lambda: StudentProfile.objects.get(user=discord_profile.user))

        schedules = await run_in_thread(lambda: list(Schedule.objects.filter(student_profile=student_profile)))
        group_courses = await run_in_thread(lambda: list(GroupCourse.objects.filter(student_profile=student_profile)))

        if not schedules or not group_courses:
            await interaction.followup.send("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á", ephemeral=True)
            return

        embed = discord.Embed(title="‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", color=discord.Color.dark_teal())

        for schedule in schedules:
            relevant_courses = [
                course for course in group_courses if str(schedule.academic_year) in course.period_date
            ]

            if relevant_courses:
                for course in relevant_courses:
                    embed.add_field(
                        name=f"{course.subject_name} ({course.subject_code})",
                        value=(
                            f"‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô: {course.teacher_name}\n"
                            f"‡πÄ‡∏ß‡∏•‡∏≤: {course.time_from} - {course.time_to}\n"
                            f"‡∏ß‡∏±‡∏ô: {course.day_w.strip()}\n"
                            f"‡∏´‡πâ‡∏≠‡∏á: {course.room_name_th}"
                        ),
                        inline=False,
                    )
            else:
                embed.add_field(name="‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏ä‡∏≤", value="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ß‡∏¥‡∏ä‡∏≤", inline=False)

        await interaction.followup.send(embed=embed)

    except DiscordProfile.DoesNotExist:
        await interaction.followup.send("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ", ephemeral=True)
    except StudentProfile.DoesNotExist:
        await interaction.followup.send("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö", ephemeral=True)
    except Exception as e:
        await interaction.followup.send(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}", ephemeral=True)

async def run_in_thread(func):
    """Run blocking code in a separate thread to avoid blocking the event loop."""
    loop = asyncio.get_running_loop()
    with concurrent.futures.ThreadPoolExecutor() as pool:
        return await loop.run_in_executor(pool, func)

@bot.tree.command(name="kuprofile", description="‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏¥‡∏™‡∏¥‡∏ï")
async def kuprofile(interaction: discord.Interaction):
    await interaction.response.defer(ephemeral=True)

    try:
        discord_profile = await run_in_thread(lambda: DiscordProfile.objects.get(discord_id=str(interaction.user.id)))
        student_profile = await run_in_thread(lambda: StudentProfile.objects.get(user=discord_profile.user))

        embed = discord.Embed(
            title=f"‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á {student_profile.name_th}",
            color=discord.Color.dark_teal()
        )
        embed.add_field(name="‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏¥‡∏™‡∏¥‡∏ï", value=student_profile.std_code, inline=True)
        embed.add_field(name="‡∏ä‡∏∑‡πà‡∏≠ (TH)", value=student_profile.name_th, inline=True)
        embed.add_field(name="‡∏ä‡∏∑‡πà‡∏≠ (EN)", value=student_profile.name_en, inline=True)
        embed.add_field(name="‡πÄ‡∏û‡∏®", value=student_profile.gender, inline=True)
        embed.add_field(name="‡∏®‡∏≤‡∏™‡∏ô‡∏≤", value=student_profile.religion, inline=True)
        embed.add_field(name="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£", value=student_profile.phone, inline=True)
        embed.add_field(name="Email", value=student_profile.email, inline=True)

        await interaction.followup.send(embed=embed)

    except DiscordProfile.DoesNotExist:
        await interaction.followup.send("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ", ephemeral=True)
    except StudentProfile.DoesNotExist:
        await interaction.followup.send("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö", ephemeral=True)
    except Exception as e:
        await interaction.followup.send(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}", ephemeral=True)

async def run_in_thread(func):
    loop = asyncio.get_event_loop()
    with concurrent.futures.ThreadPoolExecutor() as pool:
        return await loop.run_in_executor(pool, func)

@bot.tree.command(name="kugpax", description="‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡∏¥‡∏ï‡∏Å‡∏±‡∏ö‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡∏™‡∏¥‡∏ï")
async def kugpax(interaction: discord.Interaction):
    await interaction.response.defer(ephemeral=True)

    try:
        discord_profile = await run_in_thread(lambda: DiscordProfile.objects.get(discord_id=str(interaction.user.id)))
        student_profile = await run_in_thread(lambda: StudentProfile.objects.get(user=discord_profile.user))
        gpax_data = await run_in_thread(lambda: GPAX.objects.get(student_profile=student_profile))

        embed = discord.Embed(
            title=f"‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏™‡∏∞‡∏™‡∏°‡∏Ç‡∏≠‡∏á {student_profile.name_th}",
            color=discord.Color.dark_teal()
        )
        embed.add_field(name="‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡∏¥‡∏ï‡∏™‡∏∞‡∏™‡∏°", value=gpax_data.total_credit, inline=True)
        embed.add_field(name="‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏™‡∏∞‡∏™‡∏°", value=gpax_data.gpax, inline=True)

        await interaction.followup.send(embed=embed)

    except DiscordProfile.DoesNotExist:
        await interaction.followup.send("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ", ephemeral=True)
    except StudentProfile.DoesNotExist:
        await interaction.followup.send("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö", ephemeral=True)
    except GPAX.DoesNotExist:
        await interaction.followup.send("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• GPAX ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö", ephemeral=True)
    except Exception as e:
        await interaction.followup.send(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}", ephemeral=True)

async def run_in_thread(func):
    loop = asyncio.get_event_loop()
    with concurrent.futures.ThreadPoolExecutor() as pool:
        return await loop.run_in_executor(pool, func)

@bot.tree.command(name="kueducation", description="‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡∏™‡∏¥‡∏ï")
async def kueducation(interaction: discord.Interaction):
    await interaction.response.defer(ephemeral=True)

    try:
        discord_profile = await run_in_thread(lambda: DiscordProfile.objects.get(discord_id=str(interaction.user.id)))
        student_profile = await run_in_thread(lambda: StudentProfile.objects.get(user=discord_profile.user))
        education_data = await run_in_thread(lambda: StudentEducation.objects.get(student_profile=student_profile))

        embed = discord.Embed(
            title=f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏Ç‡∏≠‡∏á {student_profile.name_th}",
            color=discord.Color.dark_teal()
        )
        embed.add_field(name="‡∏™‡∏ñ‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏ô‡∏¥‡∏™‡∏¥‡∏ï", value=education_data.status, inline=True)
        embed.add_field(name="‡∏Ñ‡∏ì‡∏∞", value=education_data.faculty_name_th, inline=True)
        embed.add_field(name="‡∏™‡∏≤‡∏Ç‡∏≤", value=education_data.major_name_th, inline=True)
        embed.add_field(name="‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏¥‡∏ç‡∏ç‡∏≤", value=education_data.degree_name, inline=True)

        await interaction.followup.send(embed=embed)

    except DiscordProfile.DoesNotExist:
        await interaction.followup.send("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ", ephemeral=True)
    except StudentProfile.DoesNotExist:
        await interaction.followup.send("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö", ephemeral=True)
    except StudentEducation.DoesNotExist:
        await interaction.followup.send("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö", ephemeral=True)
    except Exception as e:
        await interaction.followup.send(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}", ephemeral=True)

async def run_in_thread(func):
    loop = asyncio.get_event_loop()
    with concurrent.futures.ThreadPoolExecutor() as pool:
        return await loop.run_in_executor(pool, func)

@bot.tree.command(name="hello", description="‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢ Hello World!")
async def hello(interaction: discord.Interaction):
    await interaction.response.send_message("Hello World!")

@bot.tree.command(name="invite", description="‡∏£‡∏±‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏ä‡∏¥‡∏ç‡∏ö‡∏≠‡∏ó KuBot")
async def invite(interaction: discord.Interaction):
    embed = discord.Embed(
        color=discord.Color.dark_teal(),
        url="https://discord.com/oauth2/authorize?client_id=1295415714144059405&permissions=8&integration_type=0&scope=bot",
        description="KuBot ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
        title="‡πÄ‡∏ä‡∏¥‡∏ç‡∏â‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà!"
    )
    
    embed.set_author(
        name="KuBot",
        url="https://discord.com/oauth2/authorize?client_id=1295415714144059405&permissions=8&integration_type=0&scope=bot",
        icon_url="https://media.discordapp.net/attachments/881215262307786822/1235961567313657959/Your_paragraph_text.png?ex=66364668&is=6634f4e8&hm=d275a5557acfcf8fb9ce3926e8b798434a2cf231f0b248521db5dc836c1bd84a&=&format=webp&quality=lossless&width=640&height=640"
    )

    embed.set_thumbnail(
        url="https://media.discordapp.net/attachments/881215262307786822/1235961567313657959/Your_paragraph_text.png?ex=66364668&is=6634f4e8&hm=d275a5557acfcf8fb9ce3926e8b798434a2cf231f0b248521db5dc836c1bd84a&=&format=webp&quality=lossless&width=640&height=640"
    )

    await interaction.response.send_message(embed=embed)


@bot.tree.command(name="ping", description="‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ping ‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó")
async def ping(interaction: discord.Interaction):
    bot_latency = round(bot.latency * 1000, 2)

    embed = discord.Embed(
        title="üèì Pong!",
        description="‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Ping ‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó",
        color=discord.Color.dark_teal()
    )
    
    embed.add_field(name="Latency:", value=f"`{bot_latency}` ms", inline=False)

    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="avatar", description="‡∏î‡∏π Avatar ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
@app_commands.describe(member="‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π Avatar")
async def avatar(interaction: discord.Interaction, member: discord.Member = None):
    if member is None:
        member = interaction.user
    embed = discord.Embed(title=f"{member}'s Avatar", color=discord.Color.dark_teal())
    embed.set_image(url=member.avatar.url)
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="profile", description="‡∏î‡∏π‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
@app_commands.describe(user="‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå")
async def profile(interaction: discord.Interaction, user: discord.Member = None):
    if user is None:
        user = interaction.user
    embed = discord.Embed(color=discord.Color.dark_teal())
    embed.set_thumbnail(url=user.avatar)
    embed.set_author(name=user.name)
    embed.add_field(name="Mention:", value=user.mention, inline=True)
    embed.add_field(name="User ID:", value=user.id, inline=True)
    embed.add_field(name="Bot:", value=user.bot, inline=True)
    embed.add_field(name="Created at:", value=user.created_at.strftime("%B %d %Y, %T"), inline=True)
    embed.add_field(name="Joined at:", value=user.joined_at.strftime("%B %d %Y, %T"), inline=True)
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="clear", description="‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏ä‡∏ó")
@app_commands.describe(amount="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö")
async def clear(interaction: discord.Interaction, amount: int = 5):
    await interaction.channel.purge(limit=amount)
    await interaction.response.send_message(f"‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° {amount} ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)

user_reminder_tasks = {}

@bot.tree.command(name="activity", description="‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á Ku")
async def activity(interaction: discord.Interaction):
    embed = discord.Embed(
        title="‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°",
        description="‡∏•‡∏≠‡∏á‡∏î‡∏π‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö Ku",
        color=discord.Color.dark_teal()
    )
    
    embed.set_author(
        name="KuBot",
        url="https://discord.com/oauth2/authorize?client_id=1295415714144059405&permissions=8&integration_type=0&scope=bot",
        icon_url="https://media.discordapp.net/attachments/881215262307786822/1235961567313657959/Your_paragraph_text.png?ex=66364668&is=6634f4e8&hm=d275a5557acfcf8fb9ce3926e8b798434a2cf231f0b248521db5dc836c1bd84a&=&format=webp&quality=lossless&width=640&height=640"
    )

    embed.set_thumbnail(
        url="https://media.discordapp.net/attachments/881215262307786822/1235961567313657959/Your_paragraph_text.png?ex=66364668&is=6634f4e8&hm=d275a5557acfcf8fb9ce3926e8b798434a2cf231f0b248521db5dc836c1bd84a&=&format=webp&quality=lossless&width=640&height=640"
    )

    view = discord.ui.View()

    view.add_item(
        discord.ui.Button(
            label="‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤", 
            style=discord.ButtonStyle.link, 
            url="https://ead.kps.ku.ac.th/2021/index.php?Itemid=162"
        )
    )

    view.add_item(
        discord.ui.Button(
            label="‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô", 
            style=discord.ButtonStyle.link, 
            url="https://eassess.ku.ac.th/m/"
        )
    )

    await interaction.response.send_message(embed=embed, view=view)

@bot.tree.command(name="server", description="‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô")
async def server(interaction: discord.Interaction):
    guild = interaction.guild
    embed = discord.Embed(color=discord.Color.dark_teal())
    embed.set_thumbnail(url=guild.icon)
    embed.set_author(name=guild.name, icon_url=guild.icon)
    embed.add_field(name="üëë Owner:", value=guild.owner.mention, inline=True)
    embed.add_field(name="üí¨ Channels:", value=len(guild.channels), inline=True)
    embed.add_field(name="üë• Members:", value=guild.member_count, inline=True)
    embed.add_field(name="üìÜ Created at:", value=guild.created_at.strftime("%B %d %Y, %T"), inline=True)
    embed.add_field(name="üÜî Server ID:", value=guild.id, inline=True)
    await interaction.response.send_message(embed=embed)
    
@bot.tree.command(name="help", description="‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô KuBot!")
async def help_command(interaction: discord.Interaction):
    embed = discord.Embed(
        title="‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á KuBot",
        description="‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö KuBot",
        color=discord.Color.dark_teal()
    )

    embed.set_author(
        name="KuBot",
        url="https://discord.com/oauth2/authorize?client_id=1295415714144059405&permissions=8&integration_type=0&scope=bot",
        icon_url="https://media.discordapp.net/attachments/881215262307786822/1235961567313657959/Your_paragraph_text.png?ex=66364668&is=6634f4e8&hm=d275a5557acfcf8fb9ce3926e8b798434a2cf231f0b248521db5dc836c1bd84a&=&format=webp&quality=lossless&width=640&height=640"
    )
    embed.set_thumbnail(
        url="https://media.discordapp.net/attachments/881215262307786822/1235961567313657959/Your_paragraph_text.png?ex=66364668&is=6634f4e8&hm=d275a5557acfcf8fb9ce3926e8b798434a2cf231f0b248521db5dc836c1bd84a&=&format=webp&quality=lossless&width=640&height=640"
    )

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏ó‡∏°‡∏µ
    commands = {
        "/my_courses": "‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå)",
        "/schedule": "‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ß‡∏¥‡∏ä‡∏≤",
        "/set_schedule": "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡∏ä‡∏≤",
        "/announcement": "‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏î‡πÄ‡∏ä‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô",
        "/set_announcement": "‡∏ï‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÉ‡∏´‡∏°‡πà",
        "/kuprofile": "‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏¥‡∏™‡∏¥‡∏ï",
        "/kugpax": "‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡∏¥‡∏ï‡∏Å‡∏±‡∏ö‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡∏™‡∏¥‡∏ï",
        "/kueducation": "‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡∏™‡∏¥‡∏ï",
        "/invite": "‡∏£‡∏±‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏ä‡∏¥‡∏ç‡∏ö‡∏≠‡∏ó KuBot",
        "/profile": "‡∏î‡∏π‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ",
        "/clear": "‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏ä‡∏ó",
        "/activity": "‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á Ku",
        "/server": "‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
        "/help": "‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô KuBot!",
        "/tuition_due": "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤",
        "/regdate": "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤",
        "/opendate": "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏†‡∏≤‡∏Ñ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤",
        "/late_reg": "‡∏ß‡∏±‡∏ô‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏°‡πà‡∏ó‡∏±‡∏ô",
        "/withdraw_no_w": "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏Ç‡∏≠‡∏ñ‡∏≠‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏±‡∏Å‡∏©‡∏£ W",
        "/withdraw_with_w": "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏Ç‡∏≠‡∏ñ‡∏≠‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤ (‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏±‡∏Å‡∏©‡∏£ W)",
        "/exam_schedule": "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡∏≤‡∏á‡∏†‡∏≤‡∏Ñ‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏≤‡∏¢‡∏†‡∏≤‡∏Ñ",
        "/evaluation": "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô",
        "/download_form": "‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£",
        "/calendar": "‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏à‡∏≤‡∏Å PDF"
    }

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô embed
    for command, description in commands.items():
        embed.add_field(name=command, value=description, inline=False)

    # ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏¥‡∏á‡∏Å‡πå
    view = discord.ui.View()
    view.add_item(
        discord.ui.Button(
            label="‡πÄ‡∏ä‡∏¥‡∏ç KuBot",
            style=discord.ButtonStyle.link,
            url="https://discord.com/oauth2/authorize?client_id=1295415714144059405&permissions=8&integration_type=0&scope=bot"
        )
    )

    await interaction.response.send_message(embed=embed, view=view)

@bot.tree.command(name="tuition_due", description="‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤")
async def tuition_due(interaction: discord.Interaction):
    embed = discord.Embed(
        title="üìÖ ‡∏ß‡∏±‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤",
        color=discord.Color.dark_teal()
    )
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏Ñ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤
    embed.add_field(name="üìò ‡∏†‡∏≤‡∏Ñ‡∏ï‡πâ‡∏ô", value="‡∏à. 3 - ‡∏≠‡∏≤. 16 ‡∏°‡∏¥.‡∏¢. 67", inline=True)
    embed.add_field(name="üìô ‡∏†‡∏≤‡∏Ñ‡∏õ‡∏•‡∏≤‡∏¢", value="‡∏à. 4 - ‡∏≠‡∏≤. 17 ‡∏û.‡∏¢. 67", inline=False)
    embed.add_field(name="üìó ‡∏†‡∏≤‡∏Ñ‡∏§‡∏î‡∏π‡∏£‡πâ‡∏≠‡∏ô ‡∏õ‡∏µ ‡∏û.‡∏®. 2568", value="‡∏à. 7 - ‡∏û‡∏§. 10 ‡πÄ‡∏°.‡∏¢. 68", inline=True)

    # ‡∏™‡πà‡∏á Embed ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏ä‡∏ó
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="regdate", description="‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤")
async def regdate(interaction: discord.Interaction):
    embed = discord.Embed(
        title="üìÖ ‡∏ß‡∏±‡∏ô‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏®‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤",
        description="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏Ñ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏¥‡∏™‡∏¥‡∏ï",
        color=discord.Color.dark_teal()
    )

    # ‡πÉ‡∏ä‡πâ Emoji + ‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏Ñ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏î‡πà‡∏ô‡∏ä‡∏±‡∏î
    embed.add_field(
        name="üìò ‡∏†‡∏≤‡∏Ñ‡∏ï‡πâ‡∏ô",
        value=(
            "‚Ä¢ **‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡∏£‡∏´‡∏±‡∏™ 64 ‡πÅ‡∏•‡∏∞‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤**: ‡∏≠. 18 ‡∏°‡∏¥.‡∏¢. 67\n"
            "‚Ä¢ **‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡∏£‡∏´‡∏±‡∏™ 65**: ‡∏û. 19 ‡∏°‡∏¥.‡∏¢. 67\n"
            "‚Ä¢ **‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡∏£‡∏´‡∏±‡∏™ 66**: ‡∏û‡∏§. 20 ‡∏°‡∏¥.‡∏¢. 67\n"
            "‚Ä¢ **‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡∏£‡∏´‡∏±‡∏™ 67**: ‡∏®. 21 ‡∏°‡∏¥.‡∏¢. 67"
        ),
        inline=False
    )

    embed.add_field(
        name="üìô ‡∏†‡∏≤‡∏Ñ‡∏õ‡∏•‡∏≤‡∏¢",
        value=(
            "‚Ä¢ **‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡∏£‡∏´‡∏±‡∏™ 64 ‡πÅ‡∏•‡∏∞‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤**: ‡∏≠. 19 ‡∏û.‡∏¢. 67\n"
            "‚Ä¢ **‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡∏£‡∏´‡∏±‡∏™ 65**: ‡∏û‡∏§. 21 ‡∏û.‡∏¢. 67\n"
            "‚Ä¢ **‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡∏£‡∏´‡∏±‡∏™ 66**: ‡∏®. 22 ‡∏û.‡∏¢. 67\n"
            "‚Ä¢ **‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡∏£‡∏´‡∏±‡∏™ 67**: ‡∏û. 20 ‡∏û.‡∏¢. 67"
        ),
        inline=False
    )

    embed.add_field(
        name="üìó ‡∏†‡∏≤‡∏Ñ‡∏§‡∏î‡∏π‡∏£‡πâ‡∏≠‡∏ô",
        value=(
            "‚Ä¢ **‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡∏£‡∏´‡∏±‡∏™ 64 ‡πÅ‡∏•‡∏∞‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤**: ‡∏û‡∏§. 17 ‡πÄ‡∏°.‡∏¢. 68\n"
            "‚Ä¢ **‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡∏£‡∏´‡∏±‡∏™ 65**: ‡∏û‡∏§. 17 ‡πÄ‡∏°.‡∏¢. 68\n"
            "‚Ä¢ **‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡∏£‡∏´‡∏±‡∏™ 66**: ‡∏®. 18 ‡πÄ‡∏°.‡∏¢. 68\n"
            "‚Ä¢ **‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡∏£‡∏´‡∏±‡∏™ 67**: ‡∏®. 18 ‡πÄ‡∏°.‡∏¢. 68"
        ),
        inline=False
    )
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏®‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤
    view = discord.ui.View()
    view.add_item(
        discord.ui.Button(
            label="‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö my.ku.th", 
            style=discord.ButtonStyle.link, 
            url="https://my.ku.th/login"
        )
    )

    # ‡∏™‡πà‡∏á Embed ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏ä‡∏ó
    await interaction.response.send_message(embed=embed, view=view)
    
@bot.tree.command(name="opendate", description="‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏†‡∏≤‡∏Ñ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤")
async def opendate(interaction: discord.Interaction):
    embed = discord.Embed(
        title="üìÖ ‡∏ß‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏†‡∏≤‡∏Ñ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤",
        description="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏†‡∏≤‡∏Ñ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤",
        color=discord.Color.dark_teal()
    )

    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏†‡∏≤‡∏Ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
    embed.add_field(
        name="üìò ‡∏†‡∏≤‡∏Ñ‡∏ï‡πâ‡∏ô",
        value="‡∏ß‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: **‡∏à. 24 ‡∏°‡∏¥.‡∏¢. 67**",
        inline=False
    )

    embed.add_field(
        name="üìô ‡∏†‡∏≤‡∏Ñ‡∏õ‡∏•‡∏≤‡∏¢",
        value="‡∏ß‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: **‡∏à. 25 ‡∏û.‡∏¢. 67**",
        inline=False
    )

    embed.add_field(
        name="üìó ‡∏†‡∏≤‡∏Ñ‡∏§‡∏î‡∏π‡∏£‡πâ‡∏≠‡∏ô",
        value="‡∏ß‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: **‡∏à. 21 ‡πÄ‡∏°.‡∏¢. 68**",
        inline=False
    )
    # ‡∏™‡πà‡∏á Embed ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏ä‡∏ó
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="late_reg", description="‡∏ß‡∏±‡∏ô‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏°‡πà‡∏ó‡∏±‡∏ô")
async def late_reg(interaction: discord.Interaction):
    embed = discord.Embed(
        title="üìÖ ‡∏ß‡∏±‡∏ô‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏°‡πà‡∏ó‡∏±‡∏ô",
        description="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏°‡πà‡∏ó‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤",
        color=discord.Color.dark_teal()
    )

    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏Ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
    embed.add_field(
        name="üìò ‡∏†‡∏≤‡∏Ñ‡∏ï‡πâ‡∏ô",
        value="‡∏ß‡∏±‡∏ô‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ** ‡∏à. 24  - ‡∏®. 28 ‡∏°‡∏¥.‡∏¢. 67**",
        inline=False
    )

    embed.add_field(
        name="üìô ‡∏†‡∏≤‡∏Ñ‡∏õ‡∏•‡∏≤‡∏¢",
        value="‡∏ß‡∏±‡∏ô‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ** ‡∏à. 25 - ‡∏®. 29 ‡∏û.‡∏¢. 67**",
        inline=False
    )

    embed.add_field(
        name="üìó ‡∏†‡∏≤‡∏Ñ‡∏§‡∏î‡∏π‡∏£‡πâ‡∏≠‡∏ô",
        value="‡∏ß‡∏±‡∏ô‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: **‡∏à. 21 - ‡∏®. 25 ‡πÄ‡∏°.‡∏¢. 68**",
        inline=False
    )

    # ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏®‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ (my.ku.th)
    view = discord.ui.View()
    view.add_item(
        discord.ui.Button(
            label="‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö my.ku.th", 
            style=discord.ButtonStyle.link, 
            url="https://my.ku.th/login"
        )
    )

    # ‡∏™‡πà‡∏á Embed ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏ä‡∏ó
    await interaction.response.send_message(embed=embed, view=view)

@bot.tree.command(name="withdraw_no_w", description="‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏Ç‡∏≠‡∏ñ‡∏≠‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏±‡∏Å‡∏©‡∏£ W")
async def withdraw_no_w(interaction: discord.Interaction):
    embed = discord.Embed(
        title="üìÖ ‡∏ß‡∏±‡∏ô‡∏Ç‡∏≠‡∏ñ‡∏≠‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏±‡∏Å‡∏©‡∏£ W",
        description="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏Ç‡∏≠‡∏ñ‡∏≠‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏®‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ (my.ku.th)",
        color=discord.Color.dark_teal()
    )

    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏Ç‡∏≠‡∏ñ‡∏≠‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å W
    embed.add_field(
        name="üìò ‡∏†‡∏≤‡∏Ñ‡∏ï‡πâ‡∏ô",
        value="‡∏ß‡∏±‡∏ô‡∏Ç‡∏≠‡∏ñ‡∏≠‡∏ô: **‡∏™. 6 - ‡∏≠. 23 ‡∏Å.‡∏Ñ. 67**",
        inline=False
    )

    embed.add_field(
        name="üìô ‡∏†‡∏≤‡∏Ñ‡∏õ‡∏•‡∏≤‡∏¢",
        value="‡∏ß‡∏±‡∏ô‡∏Ç‡∏≠‡∏ñ‡∏≠‡∏ô: **‡∏™. 7 - ‡∏≠. 24 ‡∏ò.‡∏Ñ. 67**",
        inline=False
    )

    embed.add_field(
        name="üìó ‡∏†‡∏≤‡∏Ñ‡∏§‡∏î‡∏π‡∏£‡πâ‡∏≠‡∏ô",
        value="‡∏ß‡∏±‡∏ô‡∏Ç‡∏≠‡∏ñ‡∏≠‡∏ô: **‡∏™. 3 - ‡∏≠. 20 ‡∏û.‡∏Ñ. 68**",
        inline=False
    )

    # ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏®‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤
    view = discord.ui.View()
    view.add_item(
        discord.ui.Button(
            label="‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö my.ku.th", 
            style=discord.ButtonStyle.link, 
            url="https://my.ku.th/login"
        )
    )
    # ‡∏™‡πà‡∏á Embed ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏ä‡∏ó
    await interaction.response.send_message(embed=embed, view=view)
    
@bot.tree.command(name="withdraw_with_w", description="‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏Ç‡∏≠‡∏ñ‡∏≠‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤ (‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏±‡∏Å‡∏©‡∏£ W)")
async def withdraw_with_w(interaction: discord.Interaction):
    embed = discord.Embed(
        title="üìÖ ‡∏ß‡∏±‡∏ô‡∏Ç‡∏≠‡∏ñ‡∏≠‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤ (‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏±‡∏Å‡∏©‡∏£ W)",
        description="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏Ç‡∏≠‡∏ñ‡∏≠‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏®‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ (my.ku.th)",
        color=discord.Color.dark_teal()
    )

    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏Ç‡∏≠‡∏ñ‡∏≠‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤ (‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏±‡∏Å‡∏©‡∏£ W)
    embed.add_field(
        name="üìò ‡∏†‡∏≤‡∏Ñ‡∏ï‡πâ‡∏ô",
        value="‡∏Ç‡∏≠‡∏ñ‡∏≠‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏° W: **‡∏û. 24 ‡∏Å.‡∏Ñ. - ‡∏û‡∏§. 22 ‡∏™.‡∏Ñ. 67**",
        inline=False
    )

    embed.add_field(
        name="üìô ‡∏†‡∏≤‡∏Ñ‡∏õ‡∏•‡∏≤‡∏¢",
        value="‡∏Ç‡∏≠‡∏ñ‡∏≠‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏° W: **‡∏û. 25 ‡∏ò.‡∏Ñ. 67 - ‡∏û‡∏§. 23 ‡∏°.‡∏Ñ. 68**",
        inline=False
    )

    embed.add_field(
        name="üìó ‡∏†‡∏≤‡∏Ñ‡∏§‡∏î‡∏π‡∏£‡πâ‡∏≠‡∏ô",
        value="‡∏ß‡∏±‡∏ô‡∏Ç‡∏≠‡∏ñ‡∏≠‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏° W: **-**",
        inline=False
    )

    # ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏®‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤
    view = discord.ui.View()
    view.add_item(
        discord.ui.Button(
            label="‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö my.ku.th", 
            style=discord.ButtonStyle.link, 
            url="https://my.ku.th/login"
        )
    )

    # ‡∏™‡πà‡∏á Embed ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏ä‡∏ó
    await interaction.response.send_message(embed=embed, view=view)

@bot.tree.command(name="exam_schedule", description="‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡∏≤‡∏á‡∏†‡∏≤‡∏Ñ‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏≤‡∏¢‡∏†‡∏≤‡∏Ñ")
async def exam_schedule(interaction: discord.Interaction):
    embed = discord.Embed(
        title="üìÖ ‡∏ß‡∏±‡∏ô‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡∏≤‡∏á‡∏†‡∏≤‡∏Ñ‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏≤‡∏¢‡∏†‡∏≤‡∏Ñ",
        description="‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏Ñ‡∏ï‡πâ‡∏ô‡∏†‡∏≤‡∏Ñ‡∏õ‡∏•‡∏≤‡∏¢",
        color=discord.Color.dark_teal()
    )

    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏Ñ‡∏ï‡πâ‡∏ô
    embed.add_field(
        name="üìò ‡∏†‡∏≤‡∏Ñ‡∏ï‡πâ‡∏ô",
        value=(
            "‚Ä¢ **‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡∏≤‡∏á‡∏†‡∏≤‡∏Ñ**: ‡∏™. 10 - ‡∏≠‡∏≤. 18 ‡∏™.‡∏Ñ. 67\n"
            "‚Ä¢ **‡∏™‡∏≠‡∏ö‡∏õ‡∏•‡∏≤‡∏¢‡∏†‡∏≤‡∏Ñ**: ‡∏™. 11 - ‡∏≠‡∏≤. 19 ‡∏°.‡∏Ñ. 68"
        ),
        inline=False
    )

    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏Ñ‡∏õ‡∏•‡∏≤‡∏¢
    embed.add_field(
        name="üìô ‡∏†‡∏≤‡∏Ñ‡∏õ‡∏•‡∏≤‡∏¢",
        value=(
            "‚Ä¢ **‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡∏≤‡∏á‡∏†‡∏≤‡∏Ñ**:  ‡∏à. 21 ‡∏ï.‡∏Ñ. - ‡∏®. 1 ‡∏û.‡∏¢. 67\n"
            "‚Ä¢ **‡∏™‡∏≠‡∏ö‡∏õ‡∏•‡∏≤‡∏¢‡∏†‡∏≤‡∏Ñ**:  ‡∏à. 17 - ‡∏®. 28 ‡∏°‡∏µ.‡∏Ñ 68"
        ),
        inline=False
    )

    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏Ñ‡∏§‡∏î‡∏π‡∏£‡πâ‡∏≠‡∏ô
    embed.add_field(
        name="üìó ‡∏†‡∏≤‡∏Ñ‡∏§‡∏î‡∏π‡∏£‡πâ‡∏≠‡∏ô",
        value=(
            "‚Ä¢ **‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡∏≤‡∏á‡∏†‡∏≤‡∏Ñ**: -\n"
            "‚Ä¢ **‡∏™‡∏≠‡∏ö‡∏õ‡∏•‡∏≤‡∏¢‡∏†‡∏≤‡∏Ñ**: ‡∏™. 31 ‡∏û.‡∏Ñ - ‡∏à. 2 ‡∏°‡∏¥.‡∏¢. 68"
        ),
        inline=False
    )

    # ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏®‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤
    view = discord.ui.View()
    view.add_item(
        discord.ui.Button(
            label="‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö my.ku.th", 
            style=discord.ButtonStyle.link, 
            url="https://my.ku.th/login"
        )
    )

    # ‡∏™‡πà‡∏á Embed ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏ä‡∏ó
    await interaction.response.send_message(embed=embed, view=view)

@bot.tree.command(name="evaluation", description="‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô")
async def evaluation(interaction: discord.Interaction):
    embed = discord.Embed(
        title="üìã ‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô (‡∏†‡∏≤‡∏Ñ‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏Ñ‡∏õ‡∏•‡∏≤‡∏¢)",
        description="‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ú‡πà‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô",
        color=discord.Color.dark_teal()
    )

    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏†‡∏≤‡∏Ñ‡∏ï‡πâ‡∏ô
    embed.add_field(
        name="üìò ‡∏†‡∏≤‡∏Ñ‡∏ï‡πâ‡∏ô",
        value=(
            "‚Ä¢ **‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà 1**: ‡∏à. 5 - ‡∏®. 9 ‡∏™.‡∏Ñ. 67\n"
            "‚Ä¢ **‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà 2**: ‡∏à. 14 - ‡∏®. 18 ‡∏ï.‡∏Ñ. 67"
        ),
        inline=False
    )

    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏†‡∏≤‡∏Ñ‡∏õ‡∏•‡∏≤‡∏¢
    embed.add_field(
        name="üìô ‡∏†‡∏≤‡∏Ñ‡∏õ‡∏•‡∏≤‡∏¢",
        value=(
            "‚Ä¢ **‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà 1**: ‡∏à. 6 - ‡∏®. 10 ‡∏°.‡∏Ñ. 68\n"
            "‚Ä¢ **‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà 2**:  ‡∏à. 10 - ‡∏®. 14 ‡∏°‡∏µ.‡∏Ñ. 68"
        ),
        inline=False
    )

    # ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏®‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤
    view = discord.ui.View()
    view.add_item(
        discord.ui.Button(
            label="‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô", 
            style=discord.ButtonStyle.link, 
            url="https://eassess.ku.ac.th/m/"
        )
    )

    # ‡∏™‡πà‡∏á Embed ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏ä‡∏ó
    await interaction.response.send_message(embed=embed, view=view)

# Dictionary to store form names and file paths
form_files = {
    "‡πÉ‡∏ö‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô KU3 Add-Drop Form": "D:/Github/Kubot-django/myproject/frontend/public/KU3 Add-Drop form.pdf",
    "‡πÉ‡∏ö‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô KU1 Registration Form": "D:/Github/Kubot-django/myproject/frontend/public/KU1 Registration Form.pdf",
    "‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô Request for Resignation": "D:/Github/Kubot-django/myproject/frontend/public/Request for Resignation.pdf",
    "‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ General Request": "D:/Github/Kubot-django/myproject/frontend/public/General Request.pdf",
    "‡πÉ‡∏ö‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ Request fpr Leave of Absence Request": "D:/Github/Kubot-django/myproject/frontend/public/Request fpr Leave of Absence Request.pdf",
    "‡πÉ‡∏ö‡∏•‡∏≤‡∏≠‡∏≠‡∏Å Resignation Form": "D:/Github/Kubot-django/myproject/frontend/public/Resignation Form.pdf"
}

@bot.tree.command(name="download_form", description="‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£")
async def download_form(interaction: discord.Interaction):
    # Create the main embed message
    embed = discord.Embed(
        title="‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ",
        description="‡∏Å‡∏î‡∏ó‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ",
        color=discord.Color.dark_teal()
    )
    view = discord.ui.View()

    # Arrange buttons in rows
    row_index = 0
    for i, (form_name, file_path) in enumerate(form_files.items()):
        # Define a callback function for each button that captures the specific file_path
        async def send_file_callback(interaction: discord.Interaction, path=file_path, name=form_name):
            with open(path, "rb") as file:
                await interaction.response.send_message(file=discord.File(file, filename=name + ".pdf"), ephemeral=True)

        # Create a button and set its callback to the send_file_callback function
        button = discord.ui.Button(label=form_name, style=discord.ButtonStyle.primary, row=row_index)
        button.callback = send_file_callback  # Set callback directly without lambda
        view.add_item(button)

        # Update row index for the next button to organize them in rows of 3
        if (i + 1) % 3 == 0:
            row_index += 1

    await interaction.response.send_message(embed=embed, view=view)

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
with open("D:\Github\Kubot-django\myproject\pdf.json", "r", encoding="utf-8") as json_file:
    calendar_data = json.load(json_file)

@bot.tree.command(name="calendar", description="‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏à‡∏≤‡∏Å PDF")
@app_commands.describe(page_number="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π")
async def calendar(interaction: discord.Interaction, page_number: int):
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        total_pages = calendar_data["document"]["total_pages"]
        if page_number < 1 or page_number > total_pages:
            await interaction.response.send_message(
                f"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 1 ‡πÅ‡∏•‡∏∞ {total_pages}", ephemeral=True
            )
            return

        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏∏
        page_content = next(
            (page["content"] for page in calendar_data["document"]["pages"] if page["page_number"] == page_number),
            None
        )

        if page_content:
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
            formatted_content = page_content.replace("‚Ä¢", "\n‚Ä¢").replace(":", ":\n")

            # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord
            embed = discord.Embed(
                title=f"{calendar_data['document']['title']} - Page {page_number}",
                description=formatted_content,
                color=discord.Color.dark_teal()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
        else:
            await interaction.response.send_message("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏", ephemeral=True)

    except Exception as e:
        await interaction.response.send_message(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}", ephemeral=True)
        
bot.run(os.getenv("DISCORD_BOT_TOKEN"))